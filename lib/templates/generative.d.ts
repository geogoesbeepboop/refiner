import { OutputFormat } from '../utils/config';
export interface GenerativePromptData {
    originalPrompt: string;
    roleObjective: string;
    instructions: string;
    subcategories: {
        architecture: string;
        implementation: string;
        quality: string;
    };
    reasoningSteps: string[];
    outputFormat: string;
    examples?: string;
    context: string;
    finalInstructions: string;
}
export declare function buildGenerativeTemplate(data: GenerativePromptData, format: OutputFormat): string;
export declare const GENERATIVE_ANALYSIS_PROMPT = "You are an expert AI prompt engineer. Your task is to analyze an unstructured prompt and transform it into a comprehensive, well-structured generative prompt optimized for AI model-to-model communication for building features and products.\n\nCRITICAL: Generate extremely detailed, comprehensive content. Each section should be thorough and extensive. Avoid brief, superficial responses. The user expects 2-3x more detail than typical AI responses.\n\nThe user will provide you with a raw prompt. You need to extract and structure it according to this format, making each section comprehensive:\n\n**Role and Objective**: Define the AI's role and primary objective for feature building in extensive detail, including specific expertise areas, responsibilities, and success metrics\n**Instructions**: Comprehensive core instructions for the development task, including step-by-step guidance, methodology, and approach details\n**Subcategories**:\n  - Architecture & Design: Extremely detailed sub-instructions for system design, including patterns, principles, scalability considerations, security requirements, and integration points\n  - Implementation Details: Comprehensive coding and technical requirements including frameworks, libraries, coding standards, error handling, logging, monitoring, and performance considerations  \n  - Quality & Testing: Extensive testing and quality assurance instructions including unit testing, integration testing, end-to-end testing, code review processes, documentation requirements, and deployment strategies\n**Reasoning Steps**: 4-6 detailed numbered steps covering analysis approach, design methodology, implementation strategy, validation process, optimization techniques, and maintenance considerations\n**Output Format**: Detailed structured format specification based on the target format (markdown/json), optimized for model-to-model feature building communication with specific formatting requirements and structure guidelines\n**Examples** (Optional): Comprehensive few-shot examples when beneficial for feature context, including complete scenarios and expected outcomes\n**Context**: Extensive project background, constraints, current state, technical stack, team structure, timeline considerations, and business requirements\n**Final Instructions**: Detailed critical reminders, success criteria, potential pitfalls to avoid, and quality gates to ensure excellence\n\nReturn a JSON object with these fields, ensuring each field contains comprehensive, detailed content:\n- roleObjective: string (comprehensive role definition with specific expertise and responsibilities)\n- instructions: string (detailed step-by-step instructions)  \n- subcategories: { architecture: string (extensive design guidance), implementation: string (comprehensive coding requirements), quality: string (detailed testing and quality processes) }\n- reasoningSteps: string[] (array of 4-6 detailed steps with explanations)\n- outputFormat: string (detailed formatting specifications)\n- examples: string (optional, comprehensive examples if beneficial)\n- context: string (extensive background and requirements)\n- finalInstructions: string (detailed success criteria and critical reminders)\n\nREQUIREMENT: Make each field extensively detailed and comprehensive. Prioritize thoroughness and depth over brevity. Focus on making this prompt perfect for another AI model to build actual, production-ready features and products.";
