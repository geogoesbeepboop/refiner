import { OutputFormat, PromptFlavor } from '../utils/config';
export interface GenerativeDetailedPromptData {
    originalPrompt: string;
    roleObjective: string;
    instructions: string;
    subcategories: {
        architecture: string;
        implementation: string;
        quality: string;
    };
    reasoningSteps: string[];
    outputFormat: string;
    examples?: string;
    context: string;
    finalInstructions: string;
}
export interface GenerativeCompactPromptData {
    originalPrompt: string;
    persona: string;
    objective: string;
    projectOverview?: string;
    relevantFiles?: string;
    fileStructure?: string;
    bugDescription?: {
        expected: string;
        actual: string;
        errorMessage?: string;
    };
    dependencies?: {
        [key: string]: string;
    };
    taskDecomposition: string[];
    constraints: string[];
    outputFormat: string;
}
export declare function buildGenerativeTemplate(data: GenerativeDetailedPromptData | GenerativeCompactPromptData, format: OutputFormat, flavor?: PromptFlavor): string;
export declare const GENERATIVE_DETAILED_ANALYSIS_PROMPT = "You are an expert AI prompt engineer. Your task is to analyze an unstructured prompt and transform it into a comprehensive, well-structured generative prompt optimized for AI model-to-model communication for building features and products.\n\nCRITICAL: Generate extremely detailed, comprehensive content. Each section should be thorough and extensive. Avoid brief, superficial responses. The user expects 2-3x more detail than typical AI responses.\n\nThe user will provide you with a raw prompt. You need to extract and structure it according to this format, making each section comprehensive:\n\n**Role and Objective**: Define the AI's role and primary objective for feature building in extensive detail, including specific expertise areas, responsibilities, and success metrics\n**Instructions**: Comprehensive core instructions for the development task, including step-by-step guidance, methodology, and approach details\n**Subcategories**:\n  - Architecture & Design: Extremely detailed sub-instructions for system design, including patterns, principles, scalability considerations, security requirements, and integration points\n  - Implementation Details: Comprehensive coding and technical requirements including frameworks, libraries, coding standards, error handling, logging, monitoring, and performance considerations  \n  - Quality & Testing: Extensive testing and quality assurance instructions including unit testing, integration testing, end-to-end testing, code review processes, documentation requirements, and deployment strategies\n**Reasoning Steps**: 4-6 detailed numbered steps covering analysis approach, design methodology, implementation strategy, validation process, optimization techniques, and maintenance considerations\n**Output Format**: Detailed structured format specification based on the target format (markdown/json), optimized for model-to-model feature building communication with specific formatting requirements and structure guidelines\n**Examples** (Optional): Comprehensive few-shot examples when beneficial for feature context, including complete scenarios and expected outcomes\n**Context**: Extensive project background, constraints, current state, technical stack, team structure, timeline considerations, and business requirements\n**Final Instructions**: Detailed critical reminders, success criteria, potential pitfalls to avoid, and quality gates to ensure excellence\n\nReturn ONLY a valid JSON object with these fields, ensuring each field contains comprehensive, detailed content:\n- roleObjective: string (comprehensive role definition with specific expertise and responsibilities)\n- instructions: string (detailed step-by-step instructions)  \n- subcategories: { architecture: string (extensive design guidance), implementation: string (comprehensive coding requirements), quality: string (detailed testing and quality processes) }\n- reasoningSteps: string[] (array of 4-6 detailed steps with explanations)\n- outputFormat: string (detailed formatting specifications)\n- examples: string (optional, comprehensive examples if beneficial)\n- context: string (extensive background and requirements)\n- finalInstructions: string (detailed success criteria and critical reminders)\n\nCRITICAL JSON REQUIREMENTS:\n1. Return ONLY valid JSON - no explanatory text before or after\n2. Ensure all strings are properly quoted with double quotes\n3. Ensure all properties have commas between them\n4. Escape any quotes within string values with backslashes\n5. Do not include any markdown formatting or code fences\n\nREQUIREMENT: Make each field extensively detailed and comprehensive. Prioritize thoroughness and depth over brevity. Focus on making this prompt perfect for another AI model to build actual, production-ready features and products.";
export declare const GENERATIVE_COMPACT_ANALYSIS_PROMPT = "You are an expert AI prompt engineer. Your task is to analyze an unstructured prompt and transform it into a focused, compact generative prompt optimized for quick, specific AI model-to-model communication for targeted development tasks.\n\nCRITICAL: Generate concise, actionable content. Focus on essential elements only. Avoid verbose descriptions. The user expects focused, practical guidance that gets straight to the point.\n\nThe user will provide you with a raw prompt. You need to extract and structure it according to this compact format:\n\n**Persona**: Brief, clear definition of the AI's role and expertise (1-2 sentences)\n**Objective**: Specific, actionable goal statement (1-2 sentences)\n**Project Overview** (Optional): Brief project context if relevant (1-2 sentences)\n**Relevant Files** (Optional): List of specific files to focus on if applicable\n**File Structure** (Optional): Relevant directory structure if needed for context\n**Bug Description** (Optional): If applicable, include:\n  - Expected behavior (brief)\n  - Actual behavior (brief)  \n  - Error message/stack trace (if available)\n**Dependencies** (Optional): Key dependencies and versions if relevant\n**Task Decomposition**: 3-5 specific, actionable steps\n**Constraints**: 3-5 key constraints and requirements (brief bullet points)\n**Output Format**: Specific format requirements for the deliverable\n\nReturn ONLY a valid JSON object with these fields:\n- persona: string (brief role definition)\n- objective: string (specific goal statement)\n- projectOverview: string (optional, brief project context)\n- relevantFiles: string (optional, specific files to focus on)\n- fileStructure: string (optional, relevant directory structure)\n- bugDescription: object (optional, with expected, actual, errorMessage fields)\n- dependencies: object (optional, key-value pairs of name: version)\n- taskDecomposition: string[] (array of 3-5 specific actionable steps)\n- constraints: string[] (array of 3-5 key constraints)\n- outputFormat: string (specific format requirements)\n\nCRITICAL JSON REQUIREMENTS:\n1. Return ONLY valid JSON - no explanatory text before or after\n2. Ensure all strings are properly quoted with double quotes\n3. Ensure all properties have commas between them\n4. Escape any quotes within string values with backslashes\n5. Do not include any markdown formatting or code fences\n\nREQUIREMENT: Keep all content concise and actionable. Focus on practical guidance that enables immediate action. Omit optional fields if they don't add value to the specific task.";
export declare const GENERATIVE_ANALYSIS_PROMPT = "You are an expert AI prompt engineer. Your task is to analyze an unstructured prompt and transform it into a comprehensive, well-structured generative prompt optimized for AI model-to-model communication for building features and products.\n\nCRITICAL: Generate extremely detailed, comprehensive content. Each section should be thorough and extensive. Avoid brief, superficial responses. The user expects 2-3x more detail than typical AI responses.\n\nThe user will provide you with a raw prompt. You need to extract and structure it according to this format, making each section comprehensive:\n\n**Role and Objective**: Define the AI's role and primary objective for feature building in extensive detail, including specific expertise areas, responsibilities, and success metrics\n**Instructions**: Comprehensive core instructions for the development task, including step-by-step guidance, methodology, and approach details\n**Subcategories**:\n  - Architecture & Design: Extremely detailed sub-instructions for system design, including patterns, principles, scalability considerations, security requirements, and integration points\n  - Implementation Details: Comprehensive coding and technical requirements including frameworks, libraries, coding standards, error handling, logging, monitoring, and performance considerations  \n  - Quality & Testing: Extensive testing and quality assurance instructions including unit testing, integration testing, end-to-end testing, code review processes, documentation requirements, and deployment strategies\n**Reasoning Steps**: 4-6 detailed numbered steps covering analysis approach, design methodology, implementation strategy, validation process, optimization techniques, and maintenance considerations\n**Output Format**: Detailed structured format specification based on the target format (markdown/json), optimized for model-to-model feature building communication with specific formatting requirements and structure guidelines\n**Examples** (Optional): Comprehensive few-shot examples when beneficial for feature context, including complete scenarios and expected outcomes\n**Context**: Extensive project background, constraints, current state, technical stack, team structure, timeline considerations, and business requirements\n**Final Instructions**: Detailed critical reminders, success criteria, potential pitfalls to avoid, and quality gates to ensure excellence\n\nReturn ONLY a valid JSON object with these fields, ensuring each field contains comprehensive, detailed content:\n- roleObjective: string (comprehensive role definition with specific expertise and responsibilities)\n- instructions: string (detailed step-by-step instructions)  \n- subcategories: { architecture: string (extensive design guidance), implementation: string (comprehensive coding requirements), quality: string (detailed testing and quality processes) }\n- reasoningSteps: string[] (array of 4-6 detailed steps with explanations)\n- outputFormat: string (detailed formatting specifications)\n- examples: string (optional, comprehensive examples if beneficial)\n- context: string (extensive background and requirements)\n- finalInstructions: string (detailed success criteria and critical reminders)\n\nCRITICAL JSON REQUIREMENTS:\n1. Return ONLY valid JSON - no explanatory text before or after\n2. Ensure all strings are properly quoted with double quotes\n3. Ensure all properties have commas between them\n4. Escape any quotes within string values with backslashes\n5. Do not include any markdown formatting or code fences\n\nREQUIREMENT: Make each field extensively detailed and comprehensive. Prioritize thoroughness and depth over brevity. Focus on making this prompt perfect for another AI model to build actual, production-ready features and products.";
